# This is a basic CI/CD Pipline for a django repository made by Ziad Masnour @ZiadMansourM

name: CI/CD PipLine Django

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  # First Job
  Testing:
    name: "Run Tests on code"
    # The Runner would run on the latest version of ubuntu server
    runs-on: ubuntu-latest
    
    steps:
      # Task[1]: Get Clone Key on the Runner
      - name: Prepare the Clone Key on the runner && clone
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_Clone_KEY" > ~/.ssh/Clone.key
          chmod 600 ~/.ssh/Clone.key
          sudo cat >>~/.ssh/config<<END
            Host DjangoRepo
            Hostname github.com
            User git
            IdentityFile ~/.ssh/Clone.key
          END
          git clone DjangoRepo:ZiadMansourM/MPLL.git ~/mpll
        env:
          SSH_Clone_KEY: ${{ secrets.SSH_Django_Clone_KEY }}

      # Task[2]: create config.json
      - name: Create config.json
        run: |
          cat << EOF > ~/mpll/config.json
          {
            "SECRET_KEY": $SECRET_KEY, 
            "DEBUG": $DEBUG,
            "ALLOWED_HOSTS": ["$SSH_HOST"],
            "EMAIL_HOST_USER": $EMAIL_HOST_USER,
            "EMAIL_HOST_PASSWORD": $EMAIL_HOST_PASSWORD,
            "DEFAULT_FROM_EMAIL": ""
          }
          EOF
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      
      # Task[2]: create bash script to ease Setting the Enviroment
      - name: Create SetEnviroment.sh script
        run: |
          cat >>~/SetEnviroment.sh<<END
          #!/bin/bash
          sudo apt install python3 python3-pip python3-venv
          python3 --version
          pip3 --version
          python3 -m venv ~/venv
          source ~/venv/bin/activate
          sudo pip3 install -r ~/mpll/requirements.txt
          END
          chmod +x ~/SetEnviroment.sh
      
      # Task[3]: Run SetEnviroment script
      - name: Run SetEnviroment.sh script
        run: ~/SetEnviroment.sh

      # Task[4]: create bash script to ease Testing
      - name: Creat Testing.sh scripts
        run: |
          cat >>~/Testing.sh<<END
          #!/bin/bash
          python3 ~/mpll/manage.py test 
          END
          chmod +x ~/Testing.sh
      
      # Task[5]: Run testing scripts Scripts
      - name: Run Testing.sh scripts
        run: ~/Testing.sh


  # Second Job
  Deploy:
    name: ssh & Deploy
    # The Runner would run on the latest version of ubuntu server
    runs-on: ubuntu-latest
    needs: Testing
    
    steps:
      # Task[1]: Get Clone Key on the Runner && Clone
      - name: Prepare the Clone Key on the runner && clone
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_Clone_KEY" > ~/.ssh/Clone.key
          chmod 600 ~/.ssh/Clone.key
          sudo cat >>~/.ssh/config<<END
            Host DjangoRepo
            Hostname github.com
            User git
            IdentityFile ~/.ssh/Clone.key
          END
          git clone DjangoRepo:ZiadMansourM/MPLL.git ~/mpll
          sudo rm -rf ~/mpll/.git
          sudo rm -rf ~/mpll/.github
          sudo rm -rf ~/mpll/auto_gen_data
        env:
          SSH_Clone_KEY: ${{ secrets.SSH_Django_Clone_KEY }}
      
      # Task[2]: create config.json
      - name: Create config.json
        run: |
          cat << EOF > ~/mpll/config.json
          {
            "SECRET_KEY": $SECRET_KEY, 
            "DEBUG": $DEBUG,
            "ALLOWED_HOSTS": ["$SSH_HOST"],
            "EMAIL_HOST_USER": $EMAIL_HOST_USER,
            "EMAIL_HOST_PASSWORD": $EMAIL_HOST_PASSWORD,
            "DEFAULT_FROM_EMAIL": ""
          }
          EOF
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

      # Task[3]: create the SSH config file to ease the Accessing the server later
      - name: Create SSH Config file
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
      
      # Task[4]: Create BeforeDeploy.sh script to prepare enviroment
      - name: Prepare script to Set Production enviroment 
        run: |
          cat >>~/BeforeDeploy.sh<<EOF
          #!/bin/bash
          sudo rm -rf ~/mpll
          EOF
      
      # Task[5]: remove old code from server
      - name: remove old code
        run: cat ~/BeforeDeploy.sh | ssh staging

      # Task[6]: Upload Code from runner to server
      - name: Upload Code
        run: scp -rp -i "~/.ssh/staging.key" ~/mpll $SSH_USER@$SSH_HOST:~/
        env:
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}

      # Task[7]: Create AfterDeploy.sh script to prepare enviroment
      - name: Prepare script to Set Production enviroment 
        run: |
          cat >>~/AfterDeploy.sh<<EOF
          #!/bin/bash
          sudo chown :www-data ~/mpll/db.sqlite3
          sudo chmod 664 ~/mpll/db.sqlite3

          sudo chown :www-data ~/mpll/
          sudo chmod 775 ~/mpll/

          sudo chown -R :www-data ~/mpll/media/
          sudo chmod -R 775 ~/mpll/media

          python3 -m venv ~/mpll/venv
          source ~/mpll/venv/bin/activate
          pip3 install -r ~/mpll/requirements.txt
          python3 ~/mpll/manage.py collectstatic
          python3 ~/mpll/manage.py migrate
          EOF

      # Task[8]: Excute AfterDeploy.sh
      - name: Set Production enviroment
        run: cat ~/AfterDeploy.sh | ssh staging

      # Task[9]: Restart Apache To catch edits
      - name: Restart Apache
        run: sudo service apache2 restart | ssh staging